package cn.emagsoftware.xfb.controller;

import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import net.rubyeye.xmemcached.MemcachedClient;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import cn.emagsoftware.frame.controller.BaseController;
import cn.emagsoftware.frame.exception.BaseException;
import cn.emagsoftware.pay.alipay.util.AlipaySubmit;
import cn.emagsoftware.pay.alipay.util.UtilDate;
import cn.emagsoftware.pay.rsa.alipay.util.AlipayNotify;
import cn.emagsoftware.utils.CommonUtils;
import cn.emagsoftware.utils.ConfigCache;
import cn.emagsoftware.utils.Constant;
import cn.emagsoftware.utils.WcfCallUtils;
import cn.emagsoftware.xfb.constants.AppConstants;
import cn.emagsoftware.xfb.dto.PayInfoRep;
import cn.emagsoftware.xfb.pojo.BillStage;
import cn.emagsoftware.xfb.pojo.MemberInfo;
import cn.emagsoftware.xfb.pojo.OrderInfo;
import cn.emagsoftware.xfb.service.BillStageService;
import cn.emagsoftware.xfb.service.MemberInfoService;
import cn.emagsoftware.xfb.service.OrderService;
import cn.tyiti.xfb.bojo.PayRecode;
import cn.tyiti.xfb.service.IPayRecodeService;

/**
 * 支付宝相关接口
 */
@Controller
@RequestMapping(value = "/aliPay")
public class AliPayController extends BaseController {


    @Autowired
    private BillStageService billStageService;

    @Autowired
    private OrderService orderService;


    @Autowired
    private MemberInfoService memberInfoService;

    @Autowired
    private MemcachedClient memcachedClient;
    
    @Autowired
    private WcfCallUtils wcfCallUtils;
    
    @Autowired
	private IPayRecodeService payRecodeService;
    
    //    支付宝网关地址
    String ALIPAY_GATEWAY_NEW = "http://wappaygw.alipay.com/service/rest.htm?";
    ////////////////////////////////////调用授权接口alipay.wap.trade.create.direct获取授权码token//////////////////////////////////////

    //返回格式
    String format = "xml";
    //必填，不需要修改

    //返回格式
    String v = "2.0";
    //必填，不需要修改

    //请求号
    String req_id = UtilDate.getOrderNum();
    //必填，须保证每次请求都是唯一

    //req_data详细信息

    //服务器异步通知页面路径
//    String notify_url = "http://localhost:8081/xfbInterface/notify_url.jsp";
    String notify_url = ConfigCache.getNotifyUrl();
    //需http://格式的完整路径，不能加?id=123这类自定义参数

    //页面跳转同步通知页面路径
//    String call_back_url = "http://127.0.0.1:8081/xfbInterface/call_back_url.jsp";
    String call_back_url = ConfigCache.getReturnUrl();
    //需http://格式的完整路径，不能加?id=123这类自定义参数，不能写成http://localhost/

    //操作中断返回地址
//    String merchant_url = "http://127.0.0.1:8081/xfbInterface/xxxxxx.jsp";
    String merchant_url = ConfigCache.getErrorNotifyUrl();
    //用户付款中途退出返回商户的地址。需http://格式的完整路径，不允许加?id=123这类自定义参数


    /**
     * 支付宝授权与交易
     *
     * @return
     */
    @SuppressWarnings("unchecked")
    @RequestMapping(value = "/callPay", method = {RequestMethod.GET, RequestMethod.POST})
    public String callPay(HttpServletResponse response, Map<String, String> model) {
        log.info("AliPayController.callPay,parameter[{trade_no,subject,total_fee},{"
                + request.getParameter("trade_no")
                + ","
                + request.getParameter("subject")
                + ","
                + request.getParameter("total_fee") + "}]");
        PayInfoRep payInfoRep = new PayInfoRep();
//        String ret = RET_JSP;
        try {
            //商户订单号
            String out_trade_no = new String(request.getParameter("trade_no").getBytes("ISO-8859-1"), "UTF-8");
            //商户网站订单系统中唯一订单号，必填
            //订单名称
            String subject = new String(request.getParameter("subject").getBytes("ISO-8859-1"), "UTF-8");
            //必填
            //付款金额
            String total_fee = new String(request.getParameter("total_fee").getBytes("ISO-8859-1"), "UTF-8");
            //必填
            //请求业务参数详细
            String req_dataToken = "<direct_trade_create_req><notify_url>" + notify_url + "</notify_url><call_back_url>" + call_back_url + "</call_back_url><seller_account_name>" + ConfigCache.getSellerEmail() + "</seller_account_name><out_trade_no>" + out_trade_no + "</out_trade_no><subject>" + subject + "</subject><total_fee>" + total_fee + "</total_fee><merchant_url>" + merchant_url + "</merchant_url></direct_trade_create_req>";
            //必填

            //////////////////////////////////////////////////////////////////////////////////

            //把请求参数打包成数组
            Map<String, String> sParaTempToken = new HashMap<String, String>();
            sParaTempToken.put("service", "alipay.wap.trade.create.direct");
            sParaTempToken.put("partner", ConfigCache.getPartner());
            sParaTempToken.put("_input_charset", ConfigCache.getInputCharset());
            sParaTempToken.put("sec_id", ConfigCache.getSignType());
            sParaTempToken.put("format", format);
            sParaTempToken.put("v", v);
            sParaTempToken.put("req_id", req_id);
            sParaTempToken.put("req_data", req_dataToken);


            //建立请求
            String sHtmlTextToken = AlipaySubmit.buildRequest(ALIPAY_GATEWAY_NEW, "", "", sParaTempToken);
            //URLDECODE返回的信息
            sHtmlTextToken = URLDecoder.decode(sHtmlTextToken, ConfigCache.getInputCharset());
            //获取token
            String request_token = AlipaySubmit.getRequestToken(sHtmlTextToken);

            ////////////////////////////////////根据授权码token调用交易接口alipay.wap.auth.authAndExecute//////////////////////////////////////

            //业务详细
            String req_data = "<auth_and_execute_req><request_token>" + request_token + "</request_token></auth_and_execute_req>";
            //必填

            //把请求参数打包成数组
            Map<String, String> sParaTemp = new HashMap<String, String>();
            sParaTemp.put("service", "alipay.wap.auth.authAndExecute");
            sParaTemp.put("partner", ConfigCache.getPartner());
            sParaTemp.put("_input_charset", ConfigCache.getInputCharset());
            sParaTemp.put("sec_id", ConfigCache.getSignType());
            sParaTemp.put("format", format);
            sParaTemp.put("v", v);
            sParaTemp.put("req_data", req_data);

            //建立请求
            String sHtmlText = AlipaySubmit.buildRequest(ALIPAY_GATEWAY_NEW, sParaTemp, "get", "确认");
            if (sHtmlText != null) {
                response.getWriter().write(sHtmlText);
                log.debug("支付宝授权接口调用完成");
            } else {
                  return "pay/alipayPrepareError";
            }


        } catch (BaseException e) {
            payInfoRep.setResultCode(e.getErrorCode());
            payInfoRep.setResultMessage(e.getErrorMsg());
        } catch (Exception e) {
            log.error("AliPayController.callPay", e);
            payInfoRep.setResultCode(Constant.ERROR_CODE_9999);
            payInfoRep.setResultMessage(Constant.ERROR_MESSAGE
                    .get(Constant.ERROR_CODE_9999));
        }
//        try {
//            model.put(Constant.RETURN_MESSAGE, JsonUtils.getJSONString(payInfoRep));
//        } catch (Exception e) {
//            log.error("AppSysController.appHeartbeat", e);
//        }
        return null;
    }



    /**
     * 支付宝授权与交易
     *
     * @return
     */
    @SuppressWarnings("unchecked")
    @RequestMapping(value = "/notifyPay", method = {RequestMethod.GET, RequestMethod.POST})
    public String notifyPay(HttpServletResponse response, Map<String, String> model) {
    	log.info("<<<<<<<<<<<<<notifyPay.do>>>>>>>>>>>>>>>>>>");
    	log.info("<<<<<<<<<<<<<还款开始>>>>>>>>>>>>>>>>>>");
        log.info("AliPayController.notifyPay,parameter[{trade_no,subject,total_fee,out_trade_no},{"
                + request.getParameter("trade_no")
                + ","
                + request.getParameter("subject")
                + ","
                + request.getParameter("total_fee")
                + ","
                + request.getParameter("out_trade_no") +  "}]");

        PayInfoRep payInfoRep = new PayInfoRep();
//        String ret = RET_JSP;
        try {
//            //商户订单号
//            String out_trade_no = new String(request.getParameter("trade_no").getBytes("ISO-8859-1"), "UTF-8");
//            //商户网站订单系统中唯一订单号，必填
//            //订单名称
//            String subject = new String(request.getParameter("subject").getBytes("ISO-8859-1"), "UTF-8");
//            //付款金额
//            String total_fee = new String(request.getParameter("total_fee").getBytes("ISO-8859-1"), "UTF-8");
            Map<String,String> params = new HashMap<String,String>();
            Map requestParams = request.getParameterMap();
            for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {
                String name = (String) iter.next();
                String[] values = (String[]) requestParams.get(name);
                String valueStr = "";
                for (int i = 0; i < values.length; i++) {
                    valueStr = (i == values.length - 1) ? valueStr + values[i]
                            : valueStr + values[i] + ",";
                }
                //乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化
//                valueStr = new String(valueStr.getBytes("ISO-8859-1"), "GBK");
                params.put(name, valueStr);
            }

            String trade_no = new String(request.getParameter("trade_no"));	 //支付宝交易号
            String order_no = new String(request.getParameter("out_trade_no"));//获取流水号
            String total_fee = new String(request.getParameter("total_fee")); //获取总金额
            String subject = new String(request.getParameter("subject"));//商品名称、订单名称

//            String body = "";
//            if(request.getParameter("body") != null){
//                body = request.getParameter("body");//商品描述、订单备注、描述
//            }
            //String buyer_email = request.getParameter("buyer_email");	 //买家支付宝账号
            String trade_status = request.getParameter("trade_status");	 //交易状态

            //校验总金额是否相等
            BillStage billStage = billStageService.selTotalAllByOrderNo(order_no);
            if(billStage==null){
            	log.info(">>>>>>>>>>>>>>>旧版本1.1.1在流水表里查不到信息，去账单表里去查>>>>>>>>>>>>>>>,账单ID为："+order_no);
            	BillStage _billStage = billStageService.selTotalAllByBillNo(order_no);
            	Float _totalAll = _billStage.getBaseAmount()+_billStage.getChargeAmount();
            	if (_billStage.getOverdueFine() != null && !"".equals(_billStage.getOverdueFine())) {
            		_totalAll = _totalAll+_billStage.getOverdueFine();
            	}
            	String _tempTotalAll = CommonUtils.getToString(_totalAll);
            	logInfoStart(_tempTotalAll,_billStage,total_fee);//打印检验金额日志（查出库里总金额多少，滞纳金是多少，传过来的金额是多少）
            	String _billNo = _billStage.getBillNo();
            	//计算得出通知验证结果
                boolean verify_result = AlipayNotify.verify(params);
                
                //校验还款金额及签名信息
                if(total_fee.equals(_tempTotalAll) && verify_result){
                	updateStatus(trade_status,_billNo,total_fee,order_no,subject,billStage);//提取公共部分
                    response.getWriter().write("success");
                } else{
                	logInfoError(_billNo,total_fee,_tempTotalAll,verify_result);//打印校验还款金额及签名信息info及error日志(金额或签名校验不正确时打印)
                	response.getWriter().write("fail");//fail
                }
            }else {
            	//从数据库获取还款金额 本金+服务费+滞纳金
            	log.info(">>>>>>>>>>>>>>>新版本1.1.2在流水表中有数据>>>>>>>>>>>>>>>,账单ID为："+order_no);
            	Float totalAll = billStage.getBaseAmount()+billStage.getChargeAmount();
            	if (billStage.getOverdueFine() != null && !"".equals(billStage.getOverdueFine())) {
            		totalAll = totalAll+billStage.getOverdueFine();
            	}
            	String tempTotalAll = CommonUtils.getToString(totalAll);
            	logInfoStart(tempTotalAll,billStage,total_fee);//打印检验金额日志（查出库里总金额多少，滞纳金是多少，传过来的金额是多少）
            	String billNo = billStage.getBillNo();
                
                boolean verify_result = AlipayNotify.verify(params);//计算得出通知验证结果
                
                //校验还款金额及签名信息
                if(total_fee.equals(tempTotalAll) && verify_result){
                	updateStatus(trade_status,billNo,total_fee,order_no,subject,billStage);//提取公共部分
                    response.getWriter().write("success");
                } else{
                	log.info("还款失败>>>>开始更新交易流水表状态："+order_no);//更新交易流水表状态
                	log.error("还款失败>>>>开始更新交易流水表状态："+order_no);//更新交易流水表状态
                	PayRecode payRecode = new PayRecode();
                	payRecode.setTradeNo(order_no);
                	payRecode.setPayState("A3");
                	payRecodeService.updatePayState(payRecode);
                	log.info("交易流水表状态已更改为A3:异步通知校验失败="+payRecode.getPayState());
                    log.error("交易流水表状态已更改为A3:异步通知校验失败="+payRecode.getPayState());
                    
                    logInfoError(billNo,total_fee,tempTotalAll,verify_result);//打印校验还款金额及签名信息info及error日志(金额或签名校验不正确时打印)
                	response.getWriter().write("fail");//fail
                }
            }
        } catch (Exception e) {
            log.error("AliPayController.notifyPay", e);
        }
        log.info("<<<<<<<<<<<<<还款结束>>>>>>>>>>>>>>>>>>");
        return null;
    }
    
    /**
     * 提取公共部分
     * @author shenwu
     * @param trade_status billNo total_fee order_no subject billStage
     * @throws Exception
     */
    public void updateStatus(String trade_status, String billNo, String total_fee, String order_no, String subject, BillStage billStage) throws Exception{
    	log.info("-----------校验还款金额及签名信息成功---------");
        if(trade_status.equals("TRADE_FINISHED") || trade_status.equals("TRADE_SUCCESS")){
            //判断该笔订单是否在商户网站中已经做过处理（可参考“集成教程”中“3.4返回数据处理”）
            //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
            //如果有做过处理，不执行商户的业务程序
        	
        	//查询是否有此账单
            BillStage bill = new BillStage();
            bill.setBillNo(billNo);
            bill = billStageService.getBillByOrder(bill);
            if (bill == null) {
            	log.info("未找到该账单，请查看body值是否与账单_billNo对应？");
            	throw new Exception();
            }
            Integer billId = bill.getId();
            if(memcachedClient.add(""+billId, AppConstants.BILL_TIMEOUT_SECONDS,"")){
                log.info("该账单状态没有修改，进行账单状态修改="+billId);
                bill.setBillStatus(2);
                bill.setRepayAmount(Float.valueOf(total_fee));
                billStageService.updateBill(bill);//修改状态，设置还款额

                BillStage optBill = billStageService.getBillById(bill);
                OrderInfo orderInfo = new OrderInfo();
                orderInfo.setId(optBill.getOrderId());
                OrderInfo memberOrder =  orderService.getOrderInfoById(orderInfo);

                MemberInfo memberInfo = new MemberInfo();
                memberInfo.setSysUserid(memberOrder.getOwnerUserid());
                memberInfo.setUseSum(optBill.getBaseAmount());
                memberInfoService.updateUseScore(memberInfo);
                
                //更新交易流水表状态
                log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>billStage="+billStage);
                if(billStage!=null){
                    log.info("还款成功>>>>开始更新交易流水表状态："+order_no);
                    PayRecode payRecode = new PayRecode();
                    payRecode.setTradeNo(order_no);
                    payRecode.setPayState("A2");
                    payRecodeService.updatePayState(payRecode);
                    log.info("还款成功>>>>更新交易流水表状态结束："+payRecode.getPayState());
                }
                
                wcfCallUtils.callSetBillStatus(billId, optBill.getBillNo(), 1, order_no, optBill.getBillStatus());//设置分期商城账单状态
                
                //判断账单是否全部还清，如果全部还清修改订单状态为已还清（开始）
                int billFlag = billStageService.getBillFlagByOrderId(optBill.getOrderId());
                
                //如果为零证明全部还清了。可以修改订单状态
                if (billFlag == 0) {
                	log.info("账单以全部还清，修改订单状态。。。");
                	Map paramMap = new HashMap();
                	paramMap.put("orderId", optBill.getOrderId());//订单Id
                	paramMap.put("orderStatus", 9);//订单状态
                	orderService.updateOrderStatusByOrderId(paramMap);
                	log.info("订单状态以改为已还清");
                	wcfCallUtils.callSetOrderStatus(memberOrder.getId(), memberOrder.getOrderName(), memberOrder.getOrderStatus());//设置分期商城订单状态
                }
                //判断账单是否全部还清，如果全部还清修改订单状态为已还清（结束）
            }else{
                log.info("该账单状态已经被处理，不进行账单状态修改="+billId);
            }
        }else{
            log.info("sdk支付状态为已经处理，不再进行处理"+subject);
        }
    }
    
    /**
     * 打印检验金额日志（查出库里总金额多少，滞纳金是多少，传过来的金额是多少）
     * @author shenwu
     * @param tempTotalAll billStage total_fee
     */
    public void logInfoStart(String tempTotalAll,BillStage billStage, String total_fee){
    	log.info("totalAll：账单库里总金额为"+tempTotalAll);
    	log.info("tempTotalAll:还款总金额为"+tempTotalAll+"overdueFine:滞纳金金额为"+billStage.getOverdueFine());
    	log.info("total_fee：获取总金额为"+total_fee+">>>>>>>>"+"tempTotalAll:还款总金额为"+tempTotalAll);
    }
    
    /**
     * 打印校验还款金额及签名信息info及error日志(金额或签名校验不正确时打印)
     * @author shenwu
     * @param billNo total_fee _tempTotalAll verify_result
     */
    public void logInfoError(String billNo,String total_fee,String tempTotalAll,boolean verify_result){
    	log.info("校验失败账单号为："+billNo);//打印info日志
        log.info("总金额不相等-->>"+"total_fee：获取总金额为"+total_fee+"tempTotalAll：账单库里总金额为"+tempTotalAll);//更新交易流水表状态
        log.info("签名校验参数verify_result:"+verify_result);
        
    	log.error("校验失败账单号为："+billNo);//打印error日志
        log.error("总金额不相等-->>"+"total_fee：获取总金额为"+total_fee+"tempTotalAll：账单库里总金额为"+tempTotalAll);//更新交易流水表状态
        log.error("签名校验参数verify_result:"+verify_result);
    }
    
}


