package cn.emagsoftware.xfb.service.impl;

import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.SSLContext;

import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.emagsoftware.common.JsonSerializer;
import cn.emagsoftware.frame.bean.BaseRspBean;
import cn.emagsoftware.frame.service.BaseService;
import cn.emagsoftware.utils.CommonUtils;
import cn.emagsoftware.utils.Constant;
import cn.emagsoftware.utils.json.JsonUtils;
import cn.emagsoftware.xfb.dao.CreditDao;
import cn.emagsoftware.xfb.pojo.CreditInfo;
import cn.emagsoftware.xfb.pojo.LoanInfo;
import cn.emagsoftware.xfb.pojo.Pkg1001;
import cn.emagsoftware.xfb.pojo.PkgHeader;
import cn.emagsoftware.xfb.service.CreditService;

@Service("creditService")
public class CreditServiceImpl extends BaseService implements CreditService {

	@Autowired
	private CreditDao creditDao;
	
	//查询个人征信
	@Override
	public void queryCreditInfo(String userId,String userName,String cardNumber) throws Exception {

    	BaseRspBean rsp = new BaseRspBean();
    	Pkg1001 pkg1001 = new Pkg1001();
    	CreditInfo creditInfo = new CreditInfo();
    	
    	//获取机构代码
    	String companyCode = CommonUtils.getPropertiesValue("config", "agency_code");
    	//数据服务地址
    	String creditUrl = CommonUtils.getPropertiesValue("config", "credit_url"); 
    	
    	if (StringUtils.isNotEmpty(userName)&&StringUtils.isNotEmpty(cardNumber)) {
    		creditInfo.setUserName(userName);
    		creditInfo.setCardNumber(cardNumber);
    		
    		pkg1001.setRealName(userName);
    		pkg1001.setIdCard(cardNumber);
    		String msgBody = JsonSerializer.serializer(pkg1001);
    		
    		PkgHeader reqPkg = new PkgHeader();
    		reqPkg.setVersion("01");			//默认01
    		reqPkg.setCustNo(companyCode);				//公司代码
    		reqPkg.setEncode("01");			//01.UTF8 02.GBK
    		reqPkg.setTrxCode("1001");			//报文编号 默认四位 例:0001
    		reqPkg.setEncryptType("01");	//加密类型 01.不加密 02.RSA
    		reqPkg.setMsgType("01");			//01.JSON 02.XML 03.Protobuf
    		reqPkg.setMsgBody(msgBody);			//报文主体
    		
    		String pkgStr = reqPkg.toPkgStr("UTF-8");
    		
    		PkgHeader pkgHeader = new PkgHeader();
    		pkgHeader.parseFromString(pkgStr);
    		
    		CloseableHttpClient httpclient = createSSLClientDefault();
    		HttpPost post = new HttpPost(creditUrl);
    		ByteArrayEntity reqEntity = new ByteArrayEntity(reqPkg.toPkgBytes("UTF-8"));
    		post.setEntity(reqEntity);
    		
    		CloseableHttpResponse response;
    		String result = "";
    		try {
    			response = httpclient.execute(post);
    			HttpEntity rspEntity = response.getEntity();

    		    if (rspEntity != null) {
    		    	result = EntityUtils.toString(rspEntity);
    		    }
    		    pkgHeader.parseFromString(result);
    		    String trxNoJson = pkgHeader.getMsgBody();
    		    //输出返回信息
    		    String trxNo = (String) JsonUtils.getMapFromJson(trxNoJson).get("trxNo");
    		    creditInfo.setTrxNo(trxNo);
    		    creditInfo.setUserId(userId);
    		    log.info("trxNo=====>>>>"+trxNo);
    		    creditDao.addCreditInfo(creditInfo);
    		    log.info("保存交易代码成功！");
    		    response.close();
    		    rsp.setResultCode(Constant.SUCCESS_CODE);
    			rsp.setResultMessage(Constant.ERROR_MESSAGE.get(Constant.SUCCESS_CODE));
    		} catch (Exception e) {
    			e.printStackTrace();
    			rsp.setResultCode(Constant.ERROR_CODE_9999);
    			rsp.setResultMessage(Constant.ERROR_MESSAGE.get("ERROR_CODE_9999"));
    		}
		}else {
			rsp.setResultCode(Constant.ERROR_CODE_9997);
			rsp.setResultMessage(Constant.ERROR_MESSAGE.get("ERROR_CODE_9997"));
		}
	
	}

	//保存查询结果集
	@Override
	public void addLoanInfo(LoanInfo loanInfo) throws Exception {
		creditDao.saveLoanInfo(loanInfo);
	}

	//查询用户id
	@Override
	public String getUserIdByTrxNo(String trxNo) throws Exception {
		return creditDao.getUserIdByTrxNo(trxNo);
	}

	//修改黑名单表标识位trxNo
	@Override
	public int updateTrxNo(Map<String, String> map) throws Exception {
		return creditDao.updateTrxNo(map);
	}
	
	private  static CloseableHttpClient createSSLClientDefault(){
		try {
			 SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy() {
			 //信任所有
			     public boolean isTrusted(X509Certificate[] chain,String authType) throws CertificateException {
			         return true;
			     }
			 }).build();
			 SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext);
			 return HttpClients.custom().setSSLSocketFactory(sslsf).build();
		 } catch (KeyManagementException e) {
		     e.printStackTrace();
		 } catch (NoSuchAlgorithmException e) {
		     e.printStackTrace();
		 } catch (KeyStoreException e) {
		     e.printStackTrace();
		 }
		 return  HttpClients.createDefault();
	}


}
